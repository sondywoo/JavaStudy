package com.java.thread.synch;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 2. 加锁机制1. - 加锁加条件的银行系统 - Lock和Condition对象
 * This program shows data corruption when multiple threads access a data structure.
 * 
 * 两种机制来保护代码块不受并行访问的干扰：
 *     1. 旧版本的Java使用Synchronized关键字
 *     2. JDK 5.0引进了ReentrantLock类
 *     3. 阻塞队列 java.util.concurrent.BlockingQueue，目前最常用
 * 
 * 优点：
 *     支持并行访问，总金额始终保持不变，不会出现流失的现象
 *     进入临界区后，当遇到条件不满足而退出临界区，下次再运行的时候只要从判断条件是否满足那里开始运行，效率高
 */
public class Bank3Test {
	public static final int NACCOUNTS = 100;
	public static final double INITIAL_BALANCE = 1000;
	
	public static void main(String[] args) {
		Bank3 b = new Bank3(NACCOUNTS, INITIAL_BALANCE);
		
		for(int i = 0; i < NACCOUNTS; i++){
			TransferRunnable3 r = new TransferRunnable3(b, i, INITIAL_BALANCE);
			Thread t = new Thread(r);
			t.start();
		}
	}
}

/**
 * A bank with a number of bank accounts.
 */
class Bank3{
	private final double[] accounts;
	private Lock bankLock = new ReentrantLock();	// ReentrantLock implements the Lock interface
	
	//	1. 定义一个条件对象
	private Condition sufficientFunds;
	
	/**
	 * Constructs the Bank3.
	 * @param n the number of accounts
	 * @param initialBalance the initial balance for each account.
	 */
	public Bank3(int n, double initialBalance){
		accounts = new double[n];
		for(int i = 0; i < accounts.length; i++){
			accounts[i] = initialBalance;
		}
		
		//	2. 初始化该条件对象，返回与该锁相关的一个条件对象
		sufficientFunds = bankLock.newCondition();
	}
	
	/**
	 * Transfers money from one account to another.
	 * @param from the account to transfer from.
	 * @param to the account to transfer to.
	 * @param amount the amount to transfer.
	 */
	public void transfer(int from, int to, double amount) throws InterruptedException{
		
		bankLock.lock();
		
		try{			
			//	3. 把该线程放到条件的等待集里面，线程进入阻塞状态
			while(accounts[from] < amount)
				sufficientFunds.await();
			
			//	4. 处理并行执行所要处理的业务
			System.out.print(Thread.currentThread());
			accounts[from] -= amount;
			System.out.printf("\t%10.2f from %d to %d", amount, from, to);
			accounts[to] += amount;
			System.out.printf("\tTotal Balance: %10.2f%n", getTotalBalance());
			
			//	5. 解除该条件的等待集里面所有线程的阻塞状态
			sufficientFunds.signalAll();
			
			//	void signal() - 在该条件的等待集里面随机选择一个线程，解除其阻塞状态
			//	这里要用signalAll()，因为如果用signal()在这里可能会导致死锁，因为这些线程不是修改同一个变量，而是同一些变量
		}finally{
			
			//	make sure the lock is unlocked even if an exception is thrown.
			System.out.printf("\tUnlocking.");
			bankLock.unlock();
		}
	}
	
	/**
	 * Gets the sum of all account balances.
	 * @return the total balance.
	 */
	public double getTotalBalance(){
		double sum = 0;
		for(double a : accounts){
			sum += a;
		}
		return sum;
	}
	
	/**
	 * Gets the number of accounts in the Bank3.
	 * @return the number of accounts.
	 */
	public int size(){
		return accounts.length;
	}
}

/**
 * A runnable that transfers money from an account to other accounts in a Bank3.
 */
class TransferRunnable3 implements Runnable{
	private Bank3 bank3;
	private int fromAccount;
	private double maxAmount;
	private int DELAY = 10;
	
	/**
	 * Constructs a transfer runnable.
	 * @param b the bank3 between whose account money is transferred.
	 * @param from the account to transfer money from.
	 * @param max the maximum amount of money in each transfer.
	 */
	public TransferRunnable3(Bank3 b, int from, double max){
		bank3 = b;
		fromAccount = from;
		maxAmount = max;
	}
	
	public void run(){
		try{
			while(true){
				int toAccount = (int) (bank3.size() * Math.random());
				double amount = 1000;//maxAmount * Math.random();
				bank3.transfer(fromAccount, toAccount, amount);
				Thread.sleep((int) (DELAY * Math.random()));
			}
		}catch(InterruptedException e){
			
		}
	}
}
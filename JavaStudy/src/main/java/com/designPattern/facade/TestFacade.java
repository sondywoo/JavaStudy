package com.designPattern.facade;

/**
 * 设计模式 -- Facade 外观模式
 * 
 *  - 通过定义一个高层接口 Facade，为子系统中的一组接口提供一个一致的界面
 *  - 使得子系统与子系统之间的通信和相互依赖关系达到最小
 *  - 优点：	1. 它对客户屏蔽了子系统组件，使得子系统使用起来更加方便
 *  		2. 实现了子系统与客户(客户端)之间的松耦合关系；而子系统内部的功能组件之间往往是紧耦合的
 *  		3. 如果应用需要，它并不限制客户端直接调用子系统类
 *  - 设计Facade模式时应注意：
 *  		1. 降低客户-子系统之间的耦合度，使得客户通过抽象的Facade类接口与子系统通讯，而不知道它此时使用的是子系统的哪一个实现
 *  		2. 与考虑一个类中的公共接口和私有接口一样，我们也可以考虑子系统的公共子系统类和私有子系统类。公共子系统类指所有客户程序都可以访问的类；
 *  		私有子系统类指仅用于对子系统进行扩充，仅限于该子系统的类可以访问的类。Facade是公共子系统类的一部分。
 *  - 相关模式：
 *  	通常来讲，仅需要一个Facade对象，因此Facade对象通常属于Singleton模式
 * 
 * @author Sondy Woo
 */
public class TestFacade {
	/**
	 * Client 客户端
	 *  - 客户程序/客户端通过发送请求给Facade的方式与子系统通讯，Facade将这些消息转发给适当的子系统对象。
	 *  - 尽管是子系统中的有关对象在做实际工作，但Facade模式本身，即Facade，也必须将它的接口转换成子系统的接口
	 *  - 客户端不需要直接访问子系统对象，一般也不建议直接访问子系统中的对象。
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		Facade facade = new Facade();
		facade.operation();
	}
}
